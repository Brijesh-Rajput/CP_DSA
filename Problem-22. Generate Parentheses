//https://leetcode.com/problems/generate-parentheses/
class Solution {
public:
    void helper(string s,set<string> &temp){
        //TC=O(string size + 1) = 2*n+1 where 2*n is the size of string. n is no. of pairs
        string substring="()";
        for(int i=0;i<=s.size();i++){
            string temp_string=s;
            temp_string.insert(i,substring);
            temp.insert(temp_string);
        }
    }
    set<string> generate_paranthesis(int n){
        //Using Recursion ==> using solution of n-1 pairs 
        //TC = ?????
        //SC=O(n)
        if(n==1){
            set<string> s;
            string s1="()";
            s.insert(s1);
            return s;
        }

        set<string> s =generate_paranthesis(n-1);
        set<string> temp;
        //TC=O(2*n+1 * solution of n-1 pairs)
        for(auto x: s){
            helper(x,temp);
        }
        return temp;

    }
    vector<string> generateParenthesis(int n){
        vector<string> ans;
        set<string> s = generate_paranthesis(n);
        for(auto x: s){
            ans.push_back(x);
        }
        return ans;
    }
};

//==============================================================Full Code =================================
/*
#include<bits/stdc++.h>
#define ll long long int
#define l long int
#define all(x) x.begin(),x.end()
using namespace std;
void helper(string s,set<string> &temp){
    //TC=O(string size + 1) = 2*n+1 where 2*n is the size of string. n is no. of pairs
    string substring="()";
    for(int i=0;i<=s.size();i++){
        string temp_string=s;
        temp_string.insert(i,substring);
        temp.insert(temp_string);
    }
}
set<string> generate_paranthesis(int n){
    //Using Recursion ==> using solution of n-1 pairs 
    //TC = ?????
    //SC=O(n)
    if(n==1){
        set<string> s;
        string s1="()";
        s.insert(s1);
        return s;
    }

    set<string> s =generate_paranthesis(n-1);
    set<string> temp;
    //TC=O(2*n+1 * solution of n-1 pairs)
    for(auto x: s){
        helper(x,temp);
    }
    return temp;

}
void solve(){
    int n;
    cin>>n;

    set<string> s = generate_paranthesis(n);
    for(auto x: s)
        cout<<x<<endl;
    cout<<endl;
}

int main(){
#ifndef ONLINE_JUDGE
    freopen("Input.txt","r",stdin); 
    freopen("Output.txt","w",stdout);
#endif

    ios_base::sync_with_stdio(false); cin.tie(NULL);

    ll testcases=1;
    cin>>testcases;
    while(testcases--){
        solve();
    }

}
*/
